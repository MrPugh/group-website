[  
  {
    "bibitem": "@incollection{DGLMMMS17, title={Microservices: yesterday, today, and tomorrow}, author={Dragoni, Nicola and Giallorenzo, Saverio and Lafuente, Alberto Lluch and Mazzara, Manuel and Montesi, Fabrizio and Mustafin, Ruslan and Safina, Larisa}, booktitle={Present and Ulterior Software Engineering}, pages={195--216}, year={2017}, publisher={Springer}}",
    "links": [
      { "link" : "http://www.saveriogiallorenzo.com/publications/msytt/" }
    ],
    "abstract": "Microservices is an architectural style inspired by service-oriented computing that has recently started gaining popularity. Before presenting the current state of the art in the field, this chapter reviews the history of software architecture, the reasons that led to the diffusion of objects and services first, and microservices later. Finally, open problems and future challenges are introduced. This survey primarily addresses newcomers to the discipline, while offering an academic viewpoint on the topic. In addition, we investigate some practical issues and point out a few potential solutions.",
    "tags" : [ "Microservices", "Security", "Smart Cities" ],
    "authors" : [ "Saverio Giallorenzo" , "Fabrizio Montesi", "Larisa Safina" ],
    "type" : "Chapter",
    "non_group" : false
  },
  {
    "bibitem": "@inproceedings{MMP17,  author = {Mansutti, Alessio and  Miculan, Marino and  Peressotti, Marco},  editor = {Seidl, Martina and  Zschaler, Steffen},  title = {Loose Graph Simulations},  booktitle = {Software Technologies: Applications and Foundations - {STAF} 2017  Collocated Workshops, Marburg, Germany, July 17-21, 2017, Revised  Selected Papers},  series = {Lecture Notes in Computer Science},  volume = {10748},  pages = {109--126},  publisher = {Springer},  year = {2017},  doi = {10.1007/978-3-319-74730-9\\_9} }",
    "links": [ 
      { "name" : "technical report", 
        "link" : "http://arxiv.org/abs/1705.08241",
        "icon" : "arxiv"}
    ],
    "abstract": "We introduce loose graph simulations (LGS), a new notion about labelled graphs which subsumes in an intuitive and natural way subgraph isomorphism (SGI), regular language pattern matching (RLPM) and graph simulation (GS). Being a unification of all these notions, LGS allows us to express directly also problems which are \"mixed\" instances of previous ones, and hence which would not fit easily in any of them. After the definition and some examples, we show that the problem of finding loose graph simulations is NP-complete, we provide formal translation of SGI, RLPM, and GS into LGSs, and we give the representation of a problem which extends both SGI and RLPM. Finally, we identify a subclass of the LGS problem that is polynomial.",
    "tags": ["Graph Theory"],
    "authors": ["Marco Peressotti"],
    "type": "Conference",
    "non_group": true
  },
  {
    "bibitem": "@inproceedings{MP17,  author = {Miculan, Marino and  Peressotti, Marco},  editor = {Della Monica, Dario and  Murano, Aniello and  Rubin, Sasha and  Sauro, Luigi},  title = {Deciding Weak Weighted Bisimulation},  booktitle = {Joint Proceedings of the 18th Italian Conference on Theoretical Computer  Science and the 32nd Italian Conference on Computational Logic co-located  with the 2017 {IEEE} International Workshop on Measurements and Networking  {(2017} {IEEE} M{\\&}N), Naples, Italy, September 26-28, 2017.},  series = {{CEUR} Workshop Proceedings},  volume = {1949},  pages = {126--137},  publisher = {CEUR-WS.org},  year = {2017},  url = {http://ceur-ws.org/Vol-1949/ICTCSpaper11.pdf} }",
    "links": [],
    "abstract": "Weighted labelled transition systems are LTSs whose transitions are given weights drawn from a commutative monoid, subsuming a wide range of systems with quantitative aspects. In this paper we extend this theory towards other behavioural equivalences, by considering semirings of weights. Taking advantage of this extra structure, we consider a general notion of weak weighted bisimulation, which coincides with the usual weak bisimulations in the cases of non-deterministic and fully-probabilistic systems. We present a general algorithm for deciding weak weighted bisimulation. The procedure relies on certain systems of linear equations over the semiring of weights hence it can be readily instantiated to a wide range of models. We prove that these systems admit a unique solution for ω-continuous semirings",
    "tags": [ "Concurrency", "Quantitative Semantics", "Behavioural Theory"],
    "authors": ["Marco Peressotti"],
    "type": "Conference",
    "non_group": true
  },
  {
    "bibitem": "@article{CGMP17, title = \"Cloud-of-Things meets Mobility-as-a-Service: An insider threat perspective\", journal = \"Computers & Security\", volume = \"74\", pages = \"277 - 295\", year = \"2018\", issn = \"0167-4048\", doi = \"https://doi.org/10.1016/j.cose.2017.10.006\", url = \"http://www.sciencedirect.com/science/article/pii/S0167404817302134\", author = \"Franco Callegati and Saverio Giallorenzo and Andrea Melis and Marco Prandini\", keywords = \"Mobility-as-a-Service, Federated platforms, Insider threat, Cloud-of-Things, Internet-of-Things\" }",
    "links": [ { "link" : "http://www.saveriogiallorenzo.com/publications/cs2017/" } ],
    "abstract": "Mobility-as-a-Service (MaaS) applies the everything-as-a-service paradigm of Cloud Computing to transportation: a MaaS provider offers to its users the dynamic composition of solutions of different travel agencies into a single, consistent interface. Traditionally, transits and data on mobility belong to a scattered plethora of operators. Thus, we argue that the economic model of MaaS is that of federations of providers, each trading its resources to coordinate multi-modal solutions for mobility. Such flexibility comes with many security and privacy concerns, of which insider threat is one of the most prominent. In this paper, we revise and extend previous work where we classified the potential threats of individual operators and markets of federated MaaS providers, proposing appropriate countermeasures to mitigate the problems. In addition, we consider the emerging case of Cloud-of-Things (CoT) for mobility, i.e., networks of ubiquitous, pervasive devices that provide real-time data on objects and people. Automation and pervasiveness of CoT make an additional attack surface for insiders. In an effort to limit such phenomenon, we present an overlay networking architecture, based on gossip protocols, that lets users share information on mobility with each other. A peculiarity of the architecture is that it both constrains the quality and quantity of data obtainable by insiders, optimizing the routing of requests to involve only users that are able to answer them.",
    "tags": [ "Smart Cities", "Internet of Things", "Security", "Microservices" ],
    "authors": ["Saverio Giallorenzo"],
    "type": "Journal",
    "non_group": true
  },
  {
    "bibitem": "@inproceedings{CGGMP17,  title={Smart Mobility for All: A Global Federated Market for Mobility-as-a-Service Operators},  author={Callegati, Franco and Gabbrielli, Maurizio and Giallorenzo, Saverio and Melis, Andrea and Prandini, Marco},  booktitle={ITSC2017-20th International Conference on Intelligent Transportation},  year={2017} }",
    "links": [ { "link" : "http://www.saveriogiallorenzo.com/publications/itsc2017" } ],
    "abstract": "Multi-modal travelling is a common phenomenon. However, planning multi-modal journeys is still an unstructured and time-consuming experience for customers: they lose time assembling a comprehensive plan out of disparate data, spread over a multitude of information systems — each corresponding to a different company responsible for one of the legs in the journey. Also transport operators are affected by the sparsity of the transportation market, as they might lose potential customers who could not find or know about their services. In this paper, we propose Mobility as a Service (MaaS) as a solution to such problems. Key element of MaaS is that MaaS operators can aggregate solutions of multiple providers to deliver dynamic, transparent multi-modal travels to their users, who experience transportation as managed directly by a single operator. However, given the volume and sparsity of the transportation market, we argue that MaaS operators cannot rely on one-to-one, custom contracts of usage with single mobility operators. Instead, we envision the creation of platforms that automatise the marketing of services for mobility among many mobility providers. In this work, we detail the required features of a general software platform for such a MaaS market. In particular, we provide a precise definition of MaaS through the MaaS Stack — a tiered view of the components needed by entities to join the MaaS market. Then, through the lens of the MaaS Stack, we elicit the features of an enabling software platform. Finally, to validate our approach, we present a compliant prototype, called SMAll, and discuss its main design choices, among which: i) how SMAll supports the creation of a federation-based MaaS market and ii) how microservices — an emerging architectural style that fosters cohesiveness and minimality of components — enhance flexibility and let the platform and the services of its members efficiently scale according to dynamic demands.",
    "tags": [ "Smart Cities", "Microservices", "Federation" ],
    "authors": ["Saverio Giallorenzo"],
    "type": "Conference",
    "non_group": true
  },
  {
    "bibitem": "@incollection{GLMG17,  author={Giallorenzo, Saverio and Lanese, Ivan and Mauro, Jacopo and Gabbrielli, Maurizio},  title={Programming Adaptive Microservice Applications: An {AIOCJ} Tutorial},  editor={Gay, Simon and Ravara, Ant{\\'o}nio},  booktitle={Behavioural Types: from Theory to Tools},  pages={147--167},  year={2017},  publisher={River Publishers} }",
    "links": [ { "link" : "http://www.saveriogiallorenzo.com/publications/betty2017" } ],
    "abstract": "This tutorial describes AIOCJ, which stands for Adaptive Interaction Oriented Choreographies in Jolie, a choreographic language for programming microservice-based applications which can be updated at runtime. The compilation of a single AIOCJ program generates the whole set of distributed microservices that compose the application. Adaptation is performed using adaptation rules. Abstractly, each rule replaces a pre-delimited part of the program with the new code contained in the rule itself. Concretely, at runtime, the application of a rule updates part of the microservices that compose the application so to match the behaviour specified by the updated program. Thanks to the properties of choreographies, the adaptive application is free from communication deadlocks and message races even after adaptation.",
    "tags": [ "Choreographic Programming", "Microservices" ],
    "authors": ["Saverio Giallorenzo"],
    "type": "Chapter",
    "non_group": true
  }
]
